"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const handleMongoDb_1 = __importDefault(require("./middlewares/handleMongoDb"));
const loadUser_1 = __importDefault(require("./middlewares/loadUser"));
const homeController_1 = __importDefault(require("./controller/homeController"));
const projectController_1 = __importDefault(require("./controller/projectController"));
const authController_1 = __importDefault(require("./controller/authController"));
const messageController_1 = __importDefault(require("./controller/messageController"));
const tryCatch_1 = require("./middlewares/tryCatch");
const router = express_1.default.Router();
router.use(loadUser_1.default);
router.use(handleMongoDb_1.default.mgConnect);
router.get('/', homeController_1.default.index);
router.get('/signup', authController_1.default.signupPage);
router.post('/api/signup', (0, tryCatch_1.catchErrors)(authController_1.default.signup));
router.post('/api/login', (0, tryCatch_1.catchErrors)(authController_1.default.login));
router.get('/deconnexion', authController_1.default.logout);
router.get('/getUser', (0, tryCatch_1.catchErrors)(authController_1.default.accountInformation));
router.get('/account', authController_1.default.showAccount);
router.get('/project/snake', projectController_1.default.snake);
router.get('/project/meteoApi', projectController_1.default.meteo);
router.get('/project/pokemonApi', projectController_1.default.pokemon);
router.get('/project/departementKing', projectController_1.default.department);
router.get('/project/pendu', projectController_1.default.pendu);
router.get('/project/pierreFeuilleCiseaux', projectController_1.default.pfc);
router.get('/project/chat', projectController_1.default.chat);
router.post('/api/message', (0, tryCatch_1.catchErrors)(messageController_1.default.save));
// ! Ajouter un mw de vérification d'utilisateur connecté en session.
router.get('/api/message', (0, tryCatch_1.catchErrors)(messageController_1.default.display));
router.use(tryCatch_1.errorHandler);
exports.default = router;
